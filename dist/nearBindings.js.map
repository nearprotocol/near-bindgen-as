{"version":3,"sources":["webpack://transformer/webpack/universalModuleDefinition","webpack://transformer/webpack/bootstrap","webpack://transformer/./node_modules/assemblyscript/cli/transform.js","webpack://transformer/./src/ASTBuilder.ts","webpack://transformer/./src/ast.ts","webpack://transformer/./src/base.ts","webpack://transformer/./src/index.ts","webpack://transformer/./src/typeChecker.ts","webpack://transformer/./src/visitor.ts","webpack://transformer/external \"assemblyscript\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;;;;;;;;;;;;;ACDa;AACb;AACA,8CAA8C,cAAc;AAC5D,YAAY,mBAAO,CAAC,2BAAO;AAC3B;AACA,WAAW,gBAAgrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvsBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,yCAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,wBAAwB;AACxB;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,2CAA2C,ut1H;;;;;;;;;;;;AC5/C9B;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,sCAAgB;AACjC,SAAS,mBAAO,CAAC,oFAA8B;AAC/C,2CAA2C,+T;;;;;;;;;;;;ACP9B;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,uBAAuB,mBAAO,CAAC,sCAAgB;AAC/C,gBAAgB,mBAAO,CAAC,mCAAW;AACnoEAAoE,UAAU;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,UAAU;AAC9E;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA,2EAA2E;AAC3E,6EAA6E;AAC7E,0EAA0E;AAC1E,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,kEAAkE;AAClE,iEAAiE;AACjE,iEAAiE;AACjE,iEAAiE;AACjE,wEAAwE;AACxE,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjgEAAgE;AAChE,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,2CAA2C,+qgD;;;;;;;;;;;;ACpnB9B;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,YAAY,mBAAO,CAAC,2BAAO;AAC3B,oBAAoB,mBAAO,CAAC,2CAAe;AAC3C,mBAAmB,mBAAO,CAAC,yCAAc;AACzC,aAAa,mBAAO,CAAC,6BAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+BAA+B,EAAE;AACtE;AACA;AACA;AACA,+EAA+E;AAC/E;AACA,mDAAmD,yCAAyC,sCAAsC;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qCAAqC,EAAE;AAC9E;AACA;AACA,0CAA0C;AAC1C;AACA,8DAA8D,wBAAwB,yGAAyG,4BAA4B,gCAAgC,KAAK,OAAO,8FAA8F,KAAK,oDAAoD;AAC9Z;AACA,uBAAuB,YAAY,yCAAyC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,2CAA2C,cAAc,EAAE;AAC3D,kDAAkD,2BAA2B,EAAE;AAC/E;AACA;AACA;AACA,+EAA+E,oBAAoB,sCAAsC,+BAA+B,OAAO,MAAM,mFAAmF,yBAAyB,OAAO,gCAAgC,KAAK,oDAAoD,6EAA6E,KAAK,6FAA6F,uEAAuE,+BAA+B,qFAAqF,qBAAqB,KAAK,0BAA0B,wCAAwC,KAAK,+BAA+B,2BAA2B,KAAK,wBAAwB,uCAAuC,KAAK,GAAG;AACl9B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,KAAK;AACL;AACA;AACA,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,qDAAqD,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,2BAA2B,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,IAAM;AAClB,4BAA4B,u7UAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,wBAAwB,cAAc,8BAA8B;AACpE;AACA,2CAA2C,u5wB;;;;;;;;;;;;AC5P9B;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,6BAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,2CAA2C,+qC;;;;;;;;;;;;AC9B9B;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB,EAAE;AAC3D;AACA;AACA;AACA,uEAAuE,UAAU;AACjF;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,gBAAgB;AAC3F;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,2CAA2C,+3F;;;;;;;;;;;ACzF3C,4D","file":"nearBindings.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"assemblyscript\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"assemblyscript\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"transformer\"] = factory(require(\"assemblyscript\"));\n\telse\n\t\troot[\"transformer\"] = factory(root[\"assemblyscript\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_assemblyscript__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","// becomes replaced with the actual base by asc\nexports.Transform = function Transform() {};\n","\"use strict\";\n// tslint:disable: as-internal-case\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ast_1 = require(\"./ast\");\n// declare function i64_to_string(i: I64): string;\n// import { i64_to_string } from \"../../../src/glue/i64\"\n/** An AST builder. */\nvar ASTBuilder = /** @class */ (function () {\n    function ASTBuilder() {\n        this.sb = [];\n        this.indentLevel = 0;\n    }\n    /** Rebuilds the textual source from the specified AST, as far as possible. */\n    ASTBuilder.build = function (node) {\n        var builder = new ASTBuilder();\n        builder.visitNode(node);\n        return builder.finish();\n    };\n    ASTBuilder.prototype.visitNode = function (node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.SOURCE: {\n                this.visitSource(node);\n                break;\n            }\n            // types\n            case ast_1.NodeKind.NAMEDTYPE: {\n                this.visitNamedTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONTYPE: {\n                this.visitFunctionTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.TYPEPARAMETER: {\n                this.visitTypeParameter(node);\n                break;\n            }\n            // expressions\n            case ast_1.NodeKind.FALSE:\n            case ast_1.NodeKind.NULL:\n            case ast_1.NodeKind.SUPER:\n            case ast_1.NodeKind.THIS:\n            case ast_1.NodeKind.TRUE:\n            case ast_1.NodeKind.CONSTRUCTOR:\n            case ast_1.NodeKind.IDENTIFIER: {\n                this.visitIdentifierExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.ASSERTION: {\n                this.visitAssertionExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.BINARY: {\n                this.visitBinaryExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.CALL: {\n                this.visitCallExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.CLASS: {\n                this.visitClassExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.COMMA: {\n                this.visitCommaExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.ELEMENTACCESS: {\n                this.visitElementAccessExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTION: {\n                this.visitFunctionExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.INSTANCEOF: {\n                this.visitInstanceOfExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.LITERAL: {\n                this.visitLiteralExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.NEW: {\n                this.visitNewExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.PARENTHESIZED: {\n                this.visitParenthesizedExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.PROPERTYACCESS: {\n                this.visitPropertyAccessExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.TERNARY: {\n                this.visitTernaryExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                this.visitUnaryPostfixExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                this.visitUnaryPrefixExpression(node);\n                break;\n            }\n            // statements\n            case ast_1.NodeKind.BLOCK: {\n                this.visitBlockStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.BREAK: {\n                this.visitBreakStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.CONTINUE: {\n                this.visitContinueStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.DO: {\n                this.visitDoStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EMPTY: {\n                this.visitEmptyStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORT: {\n                this.visitExportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTDEFAULT: {\n                this.visitExportDefaultStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTIMPORT: {\n                this.visitExportImportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPRESSION: {\n                this.visitExpressionStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.FOR: {\n                this.visitForStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.IF: {\n                this.visitIfStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.IMPORT: {\n                this.visitImportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.RETURN: {\n                this.visitReturnStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.SWITCH: {\n                this.visitSwitchStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.THROW: {\n                this.visitThrowStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.TRY: {\n                this.visitTryStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.VARIABLE: {\n                this.visitVariableStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.WHILE: {\n                this.visitWhileStatement(node);\n                break;\n            }\n            // declaration statements\n            case ast_1.NodeKind.CLASSDECLARATION: {\n                this.visitClassDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.ENUMDECLARATION: {\n                this.visitEnumDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.ENUMVALUEDECLARATION: {\n                this.visitEnumValueDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.FIELDDECLARATION: {\n                this.visitFieldDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                this.visitFunctionDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.IMPORTDECLARATION: {\n                this.visitImportDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.INDEXSIGNATUREDECLARATION: {\n                this.visitIndexSignatureDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.INTERFACEDECLARATION: {\n                this.visitInterfaceDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.METHODDECLARATION: {\n                this.visitMethodDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                this.visitNamespaceDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.TYPEDECLARATION: {\n                this.visitTypeDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.VARIABLEDECLARATION: {\n                this.visitVariableDeclaration(node);\n                break;\n            }\n            // other\n            case ast_1.NodeKind.DECORATOR: {\n                this.serializeDecorator(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTMEMBER: {\n                this.visitExportMember(node);\n                break;\n            }\n            case ast_1.NodeKind.PARAMETER: {\n                this.serializeParameter(node);\n                break;\n            }\n            case ast_1.NodeKind.SWITCHCASE: {\n                this.visitSwitchCase(node);\n                break;\n            }\n            default:\n                assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitSource = function (source) {\n        var statements = source.statements;\n        for (var i = 0, k = statements.length; i < k; ++i) {\n            this.visitNodeAndTerminate(statements[i]);\n        }\n    };\n    // types\n    ASTBuilder.prototype.visitTypeNode = function (node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.NAMEDTYPE: {\n                this.visitNamedTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONTYPE: {\n                this.visitFunctionTypeNode(node);\n                break;\n            }\n            default:\n                assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitTypeName = function (node) {\n        this.visitIdentifierExpression(node.identifier);\n        var sb = this.sb;\n        var current = node.next;\n        while (current) {\n            sb.push(\".\");\n            this.visitIdentifierExpression(current.identifier);\n            current = current.next;\n        }\n    };\n    ASTBuilder.prototype.visitNamedTypeNode = function (node) {\n        this.visitTypeName(node.name);\n        var typeArguments = node.typeArguments;\n        if (typeArguments) {\n            var numTypeArguments = typeArguments.length;\n            var sb = this.sb;\n            if (numTypeArguments) {\n                sb.push(\"<\");\n                this.visitTypeNode(typeArguments[0]);\n                for (var i = 1; i < numTypeArguments; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeNode(typeArguments[i]);\n                }\n                sb.push(\">\");\n            }\n            if (node.isNullable)\n                sb.push(\" | null\");\n        }\n    };\n    ASTBuilder.prototype.visitFunctionTypeNode = function (node) {\n        var isNullable = node.isNullable;\n        var sb = this.sb;\n        sb.push(isNullable ? \"((\" : \"(\");\n        var explicitThisType = node.explicitThisType;\n        if (explicitThisType) {\n            sb.push(\"this: \");\n            this.visitTypeNode(explicitThisType);\n        }\n        var parameters = node.parameters;\n        var numParameters = parameters.length;\n        if (numParameters) {\n            if (explicitThisType)\n                sb.push(\", \");\n            this.serializeParameter(parameters[0]);\n            for (var i = 1; i < numParameters; ++i) {\n                sb.push(\", \");\n                this.serializeParameter(parameters[i]);\n            }\n        }\n        var returnType = node.returnType;\n        if (returnType) {\n            sb.push(\") => \");\n            this.visitTypeNode(returnType);\n        }\n        else {\n            sb.push(\") => void\");\n        }\n        if (isNullable)\n            sb.push(\") | null\");\n    };\n    ASTBuilder.prototype.visitTypeParameter = function (node) {\n        this.visitIdentifierExpression(node.name);\n        var extendsType = node.extendsType;\n        if (extendsType) {\n            this.sb.push(\" extends \");\n            this.visitTypeNode(extendsType);\n        }\n        var defaultType = node.defaultType;\n        if (defaultType) {\n            this.sb.push(\"=\");\n            this.visitTypeNode(defaultType);\n        }\n    };\n    // expressions\n    ASTBuilder.prototype.visitIdentifierExpression = function (node) {\n        if (node.isQuoted)\n            this.visitStringLiteral(node.text);\n        else\n            this.sb.push(node.text);\n    };\n    ASTBuilder.prototype.visitArrayLiteralExpression = function (node) {\n        var sb = this.sb;\n        sb.push(\"[\");\n        var elements = node.elementExpressions;\n        var numElements = elements.length;\n        if (numElements) {\n            if (elements[0])\n                this.visitNode(elements[0]);\n            for (var i = 1; i < numElements; ++i) {\n                sb.push(\", \");\n                if (elements[i])\n                    this.visitNode(elements[i]);\n            }\n        }\n        sb.push(\"]\");\n    };\n    ASTBuilder.prototype.visitObjectLiteralExpression = function (node) {\n        var sb = this.sb;\n        var names = node.names;\n        var values = node.values;\n        var numElements = names.length;\n        assert(numElements == values.length);\n        if (numElements) {\n            sb.push(\"{\\n\");\n            ast_1.indent(sb, ++this.indentLevel);\n            this.visitNode(names[0]);\n            sb.push(\": \");\n            this.visitNode(values[0]);\n            for (var i = 1; i < numElements; ++i) {\n                sb.push(\",\\n\");\n                ast_1.indent(sb, this.indentLevel);\n                var name = names[i];\n                var value = values[i];\n                if (name === value) {\n                    this.visitNode(name);\n                }\n                else {\n                    this.visitNode(name);\n                    sb.push(\": \");\n                    this.visitNode(value);\n                }\n            }\n            sb.push(\"\\n\");\n            ast_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\"{}\");\n        }\n    };\n    ASTBuilder.prototype.visitAssertionExpression = function (node) {\n        var sb = this.sb;\n        switch (node.assertionKind) {\n            case ast_1.AssertionKind.PREFIX: {\n                sb.push(\"<\");\n                this.visitTypeNode(assert(node.toType));\n                sb.push(\">\");\n                this.visitNode(node.expression);\n                break;\n            }\n            case ast_1.AssertionKind.AS: {\n                this.visitNode(node.expression);\n                sb.push(\" as \");\n                this.visitTypeNode(assert(node.toType));\n                break;\n            }\n            case ast_1.AssertionKind.NONNULL: {\n                this.visitNode(node.expression);\n                sb.push(\"!\");\n                break;\n            }\n            default:\n                assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitBinaryExpression = function (node) {\n        var sb = this.sb;\n        this.visitNode(node.left);\n        sb.push(\" \");\n        sb.push(ast_1.operatorTokenToString(node.operator));\n        sb.push(\" \");\n        this.visitNode(node.right);\n    };\n    ASTBuilder.prototype.visitCallExpression = function (node) {\n        var sb = this.sb;\n        this.visitNode(node.expression);\n        var typeArguments = node.typeArguments;\n        if (typeArguments) {\n            var numTypeArguments = typeArguments.length;\n            if (numTypeArguments) {\n                sb.push(\"<\");\n                this.visitTypeNode(typeArguments[0]);\n                for (var i = 1; i < numTypeArguments; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeNode(typeArguments[i]);\n                }\n                sb.push(\">(\");\n            }\n        }\n        else {\n            sb.push(\"(\");\n        }\n        var args = node.arguments;\n        var numArgs = args.length;\n        if (numArgs) {\n            this.visitNode(args[0]);\n            for (var i = 1; i < numArgs; ++i) {\n                sb.push(\", \");\n                this.visitNode(args[i]);\n            }\n        }\n        sb.push(\")\");\n    };\n    ASTBuilder.prototype.visitClassExpression = function (node) {\n        var declaration = node.declaration;\n        this.visitClassDeclaration(declaration);\n    };\n    ASTBuilder.prototype.visitCommaExpression = function (node) {\n        var expressions = node.expressions;\n        var numExpressions = assert(expressions.length);\n        this.visitNode(expressions[0]);\n        var sb = this.sb;\n        for (var i = 1; i < numExpressions; ++i) {\n            sb.push(\",\");\n            this.visitNode(expressions[i]);\n        }\n    };\n    ASTBuilder.prototype.visitElementAccessExpression = function (node) {\n        var sb = this.sb;\n        this.visitNode(node.expression);\n        sb.push(\"[\");\n        this.visitNode(node.elementExpression);\n        sb.push(\"]\");\n    };\n    ASTBuilder.prototype.visitFunctionExpression = function (node) {\n        var declaration = node.declaration;\n        if (!declaration.arrowKind) {\n            if (declaration.name.text.length) {\n                this.sb.push(\"function \");\n            }\n            else {\n                this.sb.push(\"function\");\n            }\n        }\n        else {\n            assert(declaration.name.text.length == 0);\n        }\n        this.visitFunctionCommon(declaration);\n    };\n    ASTBuilder.prototype.visitLiteralExpression = function (node) {\n        switch (node.literalKind) {\n            case ast_1.LiteralKind.FLOAT: {\n                this.visitFloatLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.INTEGER: {\n                this.visitIntegerLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.STRING: {\n                this.visitStringLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.REGEXP: {\n                this.visitRegexpLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.ARRAY: {\n                this.visitArrayLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.OBJECT: {\n                this.visitObjectLiteralExpression(node);\n                break;\n            }\n            default: {\n                assert(false);\n                break;\n            }\n        }\n    };\n    ASTBuilder.prototype.visitFloatLiteralExpression = function (node) {\n        this.sb.push(node.value.toString(10));\n    };\n    ASTBuilder.prototype.visitInstanceOfExpression = function (node) {\n        this.visitNode(node.expression);\n        this.sb.push(\" instanceof \");\n        this.visitTypeNode(node.isType);\n    };\n    ASTBuilder.prototype.visitIntegerLiteralExpression = function (node) {\n        this.sb.push(i64_to_string(node.value));\n    };\n    ASTBuilder.prototype.visitStringLiteral = function (str, singleQuoted) {\n        if (singleQuoted === void 0) { singleQuoted = false; }\n        var sb = this.sb;\n        var off = 0;\n        var quote = singleQuoted ? \"'\" : \"\\\"\";\n        sb.push(quote);\n        var i = 0;\n        for (var k = str.length; i < k;) {\n            switch (str.charCodeAt(i)) {\n                case 0 /* NULL */: {\n                    if (i > off)\n                        sb.push(str.substring(off, (off = i + 1)));\n                    sb.push(\"\\\\0\");\n                    off = ++i;\n                    break;\n                }\n                case 8 /* BACKSPACE */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\b\");\n                    break;\n                }\n                case 9 /* TAB */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\t\");\n                    break;\n                }\n                case 10 /* LINEFEED */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\n\");\n                    break;\n                }\n                case 11 /* VERTICALTAB */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\v\");\n                    break;\n                }\n                case 12 /* FORMFEED */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\f\");\n                    break;\n                }\n                case 13 /* CARRIAGERETURN */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    sb.push(\"\\\\r\");\n                    off = ++i;\n                    break;\n                }\n                case 34 /* DOUBLEQUOTE */: {\n                    if (!singleQuoted) {\n                        if (i > off)\n                            sb.push(str.substring(off, i));\n                        sb.push(\"\\\\\\\"\");\n                        off = ++i;\n                    }\n                    else {\n                        ++i;\n                    }\n                    break;\n                }\n                case 39 /* SINGLEQUOTE */: {\n                    if (singleQuoted) {\n                        if (i > off)\n                            sb.push(str.substring(off, i));\n                        sb.push(\"\\\\'\");\n                        off = ++i;\n                    }\n                    else {\n                        ++i;\n                    }\n                    break;\n                }\n                case 92 /* BACKSLASH */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    sb.push(\"\\\\\\\\\");\n                    off = ++i;\n                    break;\n                }\n                default: {\n                    ++i;\n                    break;\n                }\n            }\n        }\n        if (i > off)\n            sb.push(str.substring(off, i));\n        sb.push(quote);\n    };\n    ASTBuilder.prototype.visitStringLiteralExpression = function (node) {\n        this.visitStringLiteral(node.value);\n    };\n    ASTBuilder.prototype.visitRegexpLiteralExpression = function (node) {\n        var sb = this.sb;\n        sb.push(\"/\");\n        sb.push(node.pattern);\n        sb.push(\"/\");\n        sb.push(node.patternFlags);\n    };\n    ASTBuilder.prototype.visitNewExpression = function (node) {\n        this.sb.push(\"new \");\n        this.visitCallExpression(node);\n    };\n    ASTBuilder.prototype.visitParenthesizedExpression = function (node) {\n        var sb = this.sb;\n        sb.push(\"(\");\n        this.visitNode(node.expression);\n        sb.push(\")\");\n    };\n    ASTBuilder.prototype.visitPropertyAccessExpression = function (node) {\n        this.visitNode(node.expression);\n        this.sb.push(\".\");\n        this.visitIdentifierExpression(node.property);\n    };\n    ASTBuilder.prototype.visitTernaryExpression = function (node) {\n        var sb = this.sb;\n        this.visitNode(node.condition);\n        sb.push(\" ? \");\n        this.visitNode(node.ifThen);\n        sb.push(\" : \");\n        this.visitNode(node.ifElse);\n    };\n    ASTBuilder.prototype.visitUnaryExpression = function (node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                this.visitUnaryPostfixExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                this.visitUnaryPrefixExpression(node);\n                break;\n            }\n            default:\n                assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitUnaryPostfixExpression = function (node) {\n        this.visitNode(node.operand);\n        this.sb.push(ast_1.operatorTokenToString(node.operator));\n    };\n    ASTBuilder.prototype.visitUnaryPrefixExpression = function (node) {\n        this.sb.push(ast_1.operatorTokenToString(node.operator));\n        this.visitNode(node.operand);\n    };\n    // statements\n    ASTBuilder.prototype.visitNodeAndTerminate = function (statement) {\n        this.visitNode(statement);\n        var sb = this.sb;\n        if (!sb.length || // leading EmptyStatement\n            statement.kind == ast_1.NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n            statement.kind == ast_1.NodeKind.EXPRESSION // potentially assigns a FunctionExpression\n        ) {\n            sb.push(\";\\n\");\n        }\n        else {\n            var last = sb[sb.length - 1];\n            var lastCharPos = last.length - 1;\n            if (lastCharPos >= 0 &&\n                (last.charCodeAt(lastCharPos) == 125 /* CLOSEBRACE */ ||\n                    last.charCodeAt(lastCharPos) == 59 /* SEMICOLON */)) {\n                sb.push(\"\\n\");\n            }\n            else {\n                sb.push(\";\\n\");\n            }\n        }\n    };\n    ASTBuilder.prototype.visitBlockStatement = function (node) {\n        var sb = this.sb;\n        var statements = node.statements;\n        var numStatements = statements.length;\n        if (numStatements) {\n            sb.push(\"{\\n\");\n            var indentLevel = ++this.indentLevel;\n            for (var i = 0; i < numStatements; ++i) {\n                ast_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(statements[i]);\n            }\n            ast_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\"{}\");\n        }\n    };\n    ASTBuilder.prototype.visitBreakStatement = function (node) {\n        var label = node.label;\n        if (label) {\n            this.sb.push(\"break \");\n            this.visitIdentifierExpression(label);\n        }\n        else {\n            this.sb.push(\"break\");\n        }\n    };\n    ASTBuilder.prototype.visitContinueStatement = function (node) {\n        var label = node.label;\n        if (label) {\n            this.sb.push(\"continue \");\n            this.visitIdentifierExpression(label);\n        }\n        else {\n            this.sb.push(\"continue\");\n        }\n    };\n    ASTBuilder.prototype.visitClassDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        if (node.is(ast_1.CommonFlags.ABSTRACT))\n            sb.push(\"abstract \");\n        if (node.name.text.length) {\n            sb.push(\"class \");\n            this.visitIdentifierExpression(node.name);\n        }\n        else {\n            sb.push(\"class\");\n        }\n        var typeParameters = node.typeParameters;\n        if (typeParameters && typeParameters.length) {\n            sb.push(\"<\");\n            this.visitTypeParameter(typeParameters[0]);\n            for (var i = 1, k = typeParameters.length; i < k; ++i) {\n                sb.push(\", \");\n                this.visitTypeParameter(typeParameters[i]);\n            }\n            sb.push(\">\");\n        }\n        var extendsType = node.extendsType;\n        if (extendsType) {\n            sb.push(\" extends \");\n            this.visitTypeNode(extendsType);\n        }\n        var implementsTypes = node.implementsTypes;\n        if (implementsTypes) {\n            var numImplementsTypes = implementsTypes.length;\n            if (numImplementsTypes) {\n                sb.push(\" implements \");\n                this.visitTypeNode(implementsTypes[0]);\n                for (var i = 1; i < numImplementsTypes; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeNode(implementsTypes[i]);\n                }\n            }\n        }\n        var members = node.members;\n        var numMembers = members.length;\n        if (numMembers) {\n            sb.push(\" {\\n\");\n            var indentLevel = ++this.indentLevel;\n            for (var i = 0, k = members.length; i < k; ++i) {\n                var member = members[i];\n                if (member.kind != ast_1.NodeKind.FIELDDECLARATION ||\n                    member.parameterIndex < 0) {\n                    ast_1.indent(sb, indentLevel);\n                    this.visitNodeAndTerminate(member);\n                }\n            }\n            ast_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\" {}\");\n        }\n    };\n    ASTBuilder.prototype.visitDoStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"do \");\n        this.visitNode(node.statement);\n        if (node.statement.kind == ast_1.NodeKind.BLOCK) {\n            sb.push(\" while (\");\n        }\n        else {\n            sb.push(\";\\n\");\n            ast_1.indent(sb, this.indentLevel);\n            sb.push(\"while (\");\n        }\n        this.visitNode(node.condition);\n        sb.push(\")\");\n    };\n    ASTBuilder.prototype.visitEmptyStatement = function (node) { };\n    ASTBuilder.prototype.visitEnumDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        if (node.is(ast_1.CommonFlags.CONST))\n            sb.push(\"const \");\n        sb.push(\"enum \");\n        this.visitIdentifierExpression(node.name);\n        var values = node.values;\n        var numValues = values.length;\n        if (numValues) {\n            sb.push(\" {\\n\");\n            var indentLevel = ++this.indentLevel;\n            ast_1.indent(sb, indentLevel);\n            this.visitEnumValueDeclaration(node.values[0]);\n            for (var i = 1; i < numValues; ++i) {\n                sb.push(\",\\n\");\n                ast_1.indent(sb, indentLevel);\n                this.visitEnumValueDeclaration(node.values[i]);\n            }\n            sb.push(\"\\n\");\n            ast_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\" {}\");\n        }\n    };\n    ASTBuilder.prototype.visitEnumValueDeclaration = function (node) {\n        this.visitIdentifierExpression(node.name);\n        if (node.value) {\n            this.sb.push(\" = \");\n            this.visitNode(node.value);\n        }\n    };\n    ASTBuilder.prototype.visitExportImportStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"export import \");\n        this.visitIdentifierExpression(node.externalName);\n        sb.push(\" = \");\n        this.visitIdentifierExpression(node.name);\n    };\n    ASTBuilder.prototype.visitExportMember = function (node) {\n        this.visitIdentifierExpression(node.localName);\n        if (node.exportedName.text != node.localName.text) {\n            this.sb.push(\" as \");\n            this.visitIdentifierExpression(node.exportedName);\n        }\n    };\n    ASTBuilder.prototype.visitExportStatement = function (node) {\n        var sb = this.sb;\n        if (node.isDeclare) {\n            sb.push(\"declare \");\n        }\n        var members = node.members;\n        if (members && members.length) {\n            var numMembers = members.length;\n            sb.push(\"export {\\n\");\n            var indentLevel = ++this.indentLevel;\n            ast_1.indent(sb, indentLevel);\n            this.visitExportMember(members[0]);\n            for (var i = 1; i < numMembers; ++i) {\n                sb.push(\",\\n\");\n                ast_1.indent(sb, indentLevel);\n                this.visitExportMember(members[i]);\n            }\n            --this.indentLevel;\n            sb.push(\"\\n}\");\n        }\n        else {\n            sb.push(\"export {}\");\n        }\n        var path = node.path;\n        if (path) {\n            sb.push(\" from \");\n            this.visitStringLiteralExpression(path);\n        }\n        sb.push(\";\");\n    };\n    ASTBuilder.prototype.visitExportDefaultStatement = function (node) {\n        var declaration = node.declaration;\n        switch (declaration.kind) {\n            case ast_1.NodeKind.ENUMDECLARATION: {\n                this.visitEnumDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                this.visitFunctionDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.CLASSDECLARATION: {\n                this.visitClassDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.INTERFACEDECLARATION: {\n                this.visitInterfaceDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                this.visitNamespaceDeclaration(declaration, true);\n                break;\n            }\n            default:\n                assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitExpressionStatement = function (node) {\n        this.visitNode(node.expression);\n    };\n    ASTBuilder.prototype.visitFieldDeclaration = function (node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        this.serializeAccessModifiers(node);\n        this.visitIdentifierExpression(node.name);\n        var sb = this.sb;\n        if (node.flags & ast_1.CommonFlags.DEFINITE_ASSIGNMENT) {\n            sb.push(\"!\");\n        }\n        var type = node.type;\n        if (type) {\n            sb.push(\": \");\n            this.visitTypeNode(type);\n        }\n        var initializer = node.initializer;\n        if (initializer) {\n            sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    };\n    ASTBuilder.prototype.visitForStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"for (\");\n        var initializer = node.initializer;\n        if (initializer) {\n            this.visitNode(initializer);\n        }\n        var condition = node.condition;\n        if (condition) {\n            sb.push(\"; \");\n            this.visitNode(condition);\n        }\n        else {\n            sb.push(\";\");\n        }\n        var incrementor = node.incrementor;\n        if (incrementor) {\n            sb.push(\"; \");\n            this.visitNode(incrementor);\n        }\n        else {\n            sb.push(\";\");\n        }\n        sb.push(\") \");\n        this.visitNode(node.statement);\n    };\n    ASTBuilder.prototype.visitFunctionDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var sb = this.sb;\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n            this.serializeAccessModifiers(node);\n        }\n        if (node.name.text.length) {\n            sb.push(\"function \");\n        }\n        else {\n            sb.push(\"function\");\n        }\n        this.visitFunctionCommon(node);\n    };\n    ASTBuilder.prototype.visitFunctionCommon = function (node) {\n        var sb = this.sb;\n        this.visitIdentifierExpression(node.name);\n        var signature = node.signature;\n        var typeParameters = node.typeParameters;\n        if (typeParameters) {\n            var numTypeParameters = typeParameters.length;\n            if (numTypeParameters) {\n                sb.push(\"<\");\n                this.visitTypeParameter(typeParameters[0]);\n                for (var i = 1; i < numTypeParameters; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeParameter(typeParameters[i]);\n                }\n                sb.push(\">\");\n            }\n        }\n        if (node.arrowKind == 2 /* ARROW_SINGLE */) {\n            var parameters = signature.parameters;\n            assert(parameters.length == 1);\n            assert(!signature.explicitThisType);\n            this.serializeParameter(parameters[0]);\n        }\n        else {\n            sb.push(\"(\");\n            var parameters = signature.parameters;\n            var numParameters = parameters.length;\n            var explicitThisType = signature.explicitThisType;\n            if (explicitThisType) {\n                sb.push(\"this: \");\n                this.visitTypeNode(explicitThisType);\n            }\n            if (numParameters) {\n                if (explicitThisType)\n                    sb.push(\", \");\n                this.serializeParameter(parameters[0]);\n                for (var i = 1; i < numParameters; ++i) {\n                    sb.push(\", \");\n                    this.serializeParameter(parameters[i]);\n                }\n            }\n        }\n        var body = node.body;\n        var returnType = signature.returnType;\n        if (node.arrowKind) {\n            if (body) {\n                if (node.arrowKind == 2 /* ARROW_SINGLE */) {\n                    assert(ast_1.isTypeOmitted(returnType));\n                }\n                else {\n                    if (ast_1.isTypeOmitted(returnType)) {\n                        sb.push(\")\");\n                    }\n                    else {\n                        sb.push(\"): \");\n                        this.visitTypeNode(returnType);\n                    }\n                }\n                sb.push(\" => \");\n                this.visitNode(body);\n            }\n            else {\n                assert(!ast_1.isTypeOmitted(returnType));\n                sb.push(\" => \");\n                this.visitTypeNode(returnType);\n            }\n        }\n        else {\n            if (!ast_1.isTypeOmitted(returnType) &&\n                !node.isAny(ast_1.CommonFlags.CONSTRUCTOR | ast_1.CommonFlags.SET)) {\n                sb.push(\"): \");\n                this.visitTypeNode(returnType);\n            }\n            else {\n                sb.push(\")\");\n            }\n            if (body) {\n                sb.push(\" \");\n                this.visitNode(body);\n            }\n        }\n    };\n    ASTBuilder.prototype.visitIfStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"if (\");\n        this.visitNode(node.condition);\n        sb.push(\") \");\n        var ifTrue = node.ifTrue;\n        this.visitNode(ifTrue);\n        if (ifTrue.kind != ast_1.NodeKind.BLOCK) {\n            sb.push(\";\\n\");\n        }\n        var ifFalse = node.ifFalse;\n        if (ifFalse) {\n            if (ifTrue.kind == ast_1.NodeKind.BLOCK) {\n                sb.push(\" else \");\n            }\n            else {\n                sb.push(\"else \");\n            }\n            this.visitNode(ifFalse);\n        }\n    };\n    ASTBuilder.prototype.visitImportDeclaration = function (node) {\n        var externalName = node.foreignName;\n        var name = node.name;\n        this.visitIdentifierExpression(externalName);\n        if (externalName.text != name.text) {\n            this.sb.push(\" as \");\n            this.visitIdentifierExpression(name);\n        }\n    };\n    ASTBuilder.prototype.visitImportStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"import \");\n        var declarations = node.declarations;\n        var namespaceName = node.namespaceName;\n        if (declarations) {\n            var numDeclarations = declarations.length;\n            if (numDeclarations) {\n                sb.push(\"{\\n\");\n                var indentLevel = ++this.indentLevel;\n                ast_1.indent(sb, indentLevel);\n                this.visitImportDeclaration(declarations[0]);\n                for (var i = 1; i < numDeclarations; ++i) {\n                    sb.push(\",\\n\");\n                    ast_1.indent(sb, indentLevel);\n                    this.visitImportDeclaration(declarations[i]);\n                }\n                --this.indentLevel;\n                sb.push(\"\\n} from \");\n            }\n            else {\n                sb.push(\"{} from \");\n            }\n        }\n        else if (namespaceName) {\n            sb.push(\"* as \");\n            this.visitIdentifierExpression(namespaceName);\n            sb.push(\" from \");\n        }\n        this.visitStringLiteralExpression(node.path);\n    };\n    ASTBuilder.prototype.visitIndexSignatureDeclaration = function (node) {\n        var sb = this.sb;\n        sb.push(\"[key: \");\n        this.visitTypeNode(node.keyType);\n        sb.push(\"]: \");\n        this.visitTypeNode(node.valueType);\n    };\n    ASTBuilder.prototype.visitInterfaceDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        sb.push(\"interface \");\n        this.visitIdentifierExpression(node.name);\n        var typeParameters = node.typeParameters;\n        if (typeParameters && typeParameters.length) {\n            sb.push(\"<\");\n            this.visitTypeParameter(typeParameters[0]);\n            for (var i = 1, k = typeParameters.length; i < k; ++i) {\n                sb.push(\", \");\n                this.visitTypeParameter(typeParameters[i]);\n            }\n            sb.push(\">\");\n        }\n        var extendsType = node.extendsType;\n        if (extendsType) {\n            sb.push(\" extends \");\n            this.visitTypeNode(extendsType);\n        }\n        // must not have implementsTypes\n        sb.push(\" {\\n\");\n        var indentLevel = ++this.indentLevel;\n        var members = node.members;\n        for (var i = 0, k = members.length; i < k; ++i) {\n            ast_1.indent(sb, indentLevel);\n            this.visitNodeAndTerminate(members[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"}\");\n    };\n    ASTBuilder.prototype.visitMethodDeclaration = function (node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        this.serializeAccessModifiers(node);\n        if (node.is(ast_1.CommonFlags.GET)) {\n            this.sb.push(\"get \");\n        }\n        else if (node.is(ast_1.CommonFlags.SET)) {\n            this.sb.push(\"set \");\n        }\n        this.visitFunctionCommon(node);\n    };\n    ASTBuilder.prototype.visitNamespaceDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        sb.push(\"namespace \");\n        this.visitIdentifierExpression(node.name);\n        var members = node.members;\n        var numMembers = members.length;\n        if (numMembers) {\n            sb.push(\" {\\n\");\n            var indentLevel = ++this.indentLevel;\n            for (var i = 0, k = members.length; i < k; ++i) {\n                ast_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(members[i]);\n            }\n            ast_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\" {}\");\n        }\n    };\n    ASTBuilder.prototype.visitReturnStatement = function (node) {\n        var value = node.value;\n        if (value) {\n            this.sb.push(\"return \");\n            this.visitNode(value);\n        }\n        else {\n            this.sb.push(\"return\");\n        }\n    };\n    ASTBuilder.prototype.visitSwitchCase = function (node) {\n        var sb = this.sb;\n        var label = node.label;\n        if (label) {\n            sb.push(\"case \");\n            this.visitNode(label);\n            sb.push(\":\\n\");\n        }\n        else {\n            sb.push(\"default:\\n\");\n        }\n        var statements = node.statements;\n        var numStatements = statements.length;\n        if (numStatements) {\n            var indentLevel = ++this.indentLevel;\n            ast_1.indent(sb, indentLevel);\n            this.visitNodeAndTerminate(statements[0]);\n            for (var i = 1; i < numStatements; ++i) {\n                ast_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(statements[i]);\n            }\n            --this.indentLevel;\n        }\n    };\n    ASTBuilder.prototype.visitSwitchStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"switch (\");\n        this.visitNode(node.condition);\n        sb.push(\") {\\n\");\n        var indentLevel = ++this.indentLevel;\n        var cases = node.cases;\n        for (var i = 0, k = cases.length; i < k; ++i) {\n            ast_1.indent(sb, indentLevel);\n            this.visitSwitchCase(cases[i]);\n            sb.push(\"\\n\");\n        }\n        --this.indentLevel;\n        sb.push(\"}\");\n    };\n    ASTBuilder.prototype.visitThrowStatement = function (node) {\n        this.sb.push(\"throw \");\n        this.visitNode(node.value);\n    };\n    ASTBuilder.prototype.visitTryStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"try {\\n\");\n        var indentLevel = ++this.indentLevel;\n        var statements = node.statements;\n        for (var i = 0, k = statements.length; i < k; ++i) {\n            ast_1.indent(sb, indentLevel);\n            this.visitNodeAndTerminate(statements[i]);\n        }\n        var catchVariable = node.catchVariable;\n        if (catchVariable) {\n            ast_1.indent(sb, indentLevel - 1);\n            sb.push(\"} catch (\");\n            this.visitIdentifierExpression(catchVariable);\n            sb.push(\") {\\n\");\n            var catchStatements = node.catchStatements;\n            if (catchStatements) {\n                for (var i = 0, k = catchStatements.length; i < k; ++i) {\n                    ast_1.indent(sb, indentLevel);\n                    this.visitNodeAndTerminate(catchStatements[i]);\n                }\n            }\n        }\n        var finallyStatements = node.finallyStatements;\n        if (finallyStatements) {\n            ast_1.indent(sb, indentLevel - 1);\n            sb.push(\"} finally {\\n\");\n            for (var i = 0, k = finallyStatements.length; i < k; ++i) {\n                ast_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(finallyStatements[i]);\n            }\n        }\n        ast_1.indent(sb, indentLevel - 1);\n        sb.push(\"}\");\n    };\n    ASTBuilder.prototype.visitTypeDeclaration = function (node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        this.serializeExternalModifiers(node);\n        sb.push(\"type \");\n        this.visitIdentifierExpression(node.name);\n        var typeParameters = node.typeParameters;\n        if (typeParameters) {\n            var numTypeParameters = typeParameters.length;\n            if (numTypeParameters) {\n                sb.push(\"<\");\n                for (var i = 0; i < numTypeParameters; ++i) {\n                    this.visitTypeParameter(typeParameters[i]);\n                }\n                sb.push(\">\");\n            }\n        }\n        sb.push(\" = \");\n        this.visitTypeNode(node.type);\n    };\n    ASTBuilder.prototype.visitVariableDeclaration = function (node) {\n        this.visitIdentifierExpression(node.name);\n        var type = node.type;\n        var sb = this.sb;\n        if (node.flags & ast_1.CommonFlags.DEFINITE_ASSIGNMENT) {\n            sb.push(\"!\");\n        }\n        if (type) {\n            sb.push(\": \");\n            this.visitTypeNode(type);\n        }\n        var initializer = node.initializer;\n        if (initializer) {\n            sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    };\n    ASTBuilder.prototype.visitVariableStatement = function (node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        var declarations = node.declarations;\n        var numDeclarations = assert(declarations.length);\n        var firstDeclaration = declarations[0];\n        this.serializeExternalModifiers(firstDeclaration);\n        sb.push(firstDeclaration.is(ast_1.CommonFlags.CONST)\n            ? \"const \"\n            : firstDeclaration.is(ast_1.CommonFlags.LET)\n                ? \"let \"\n                : \"var \");\n        this.visitVariableDeclaration(node.declarations[0]);\n        for (var i = 1; i < numDeclarations; ++i) {\n            sb.push(\", \");\n            this.visitVariableDeclaration(node.declarations[i]);\n        }\n    };\n    ASTBuilder.prototype.visitWhileStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"while (\");\n        this.visitNode(node.condition);\n        var statement = node.statement;\n        if (statement.kind == ast_1.NodeKind.EMPTY) {\n            sb.push(\")\");\n        }\n        else {\n            sb.push(\") \");\n            this.visitNode(node.statement);\n        }\n    };\n    // other\n    ASTBuilder.prototype.serializeDecorator = function (node) {\n        var sb = this.sb;\n        sb.push(\"@\");\n        this.visitNode(node.name);\n        var args = node.arguments;\n        if (args) {\n            sb.push(\"(\");\n            var numArgs = args.length;\n            if (numArgs) {\n                this.visitNode(args[0]);\n                for (var i = 1; i < numArgs; ++i) {\n                    sb.push(\", \");\n                    this.visitNode(args[i]);\n                }\n            }\n            sb.push(\")\\n\");\n        }\n        else {\n            sb.push(\"\\n\");\n        }\n        ast_1.indent(sb, this.indentLevel);\n    };\n    ASTBuilder.prototype.serializeParameter = function (node) {\n        var sb = this.sb;\n        var kind = node.parameterKind;\n        var implicitFieldDeclaration = node.implicitFieldDeclaration;\n        if (implicitFieldDeclaration) {\n            this.serializeAccessModifiers(implicitFieldDeclaration);\n        }\n        if (kind == ast_1.ParameterKind.REST) {\n            sb.push(\"...\");\n        }\n        this.visitIdentifierExpression(node.name);\n        var type = node.type;\n        var initializer = node.initializer;\n        if (type) {\n            if (kind == ast_1.ParameterKind.OPTIONAL && !initializer)\n                sb.push(\"?\");\n            if (!ast_1.isTypeOmitted(type)) {\n                sb.push(\": \");\n                this.visitTypeNode(type);\n            }\n        }\n        if (initializer) {\n            sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    };\n    ASTBuilder.prototype.serializeExternalModifiers = function (node) {\n        var sb = this.sb;\n        if (node.is(ast_1.CommonFlags.EXPORT)) {\n            sb.push(\"export \");\n        }\n        else if (node.is(ast_1.CommonFlags.IMPORT)) {\n            sb.push(\"import \");\n        }\n        else if (node.is(ast_1.CommonFlags.DECLARE)) {\n            sb.push(\"declare \");\n        }\n    };\n    ASTBuilder.prototype.serializeAccessModifiers = function (node) {\n        var sb = this.sb;\n        if (node.is(ast_1.CommonFlags.PUBLIC)) {\n            sb.push(\"public \");\n        }\n        else if (node.is(ast_1.CommonFlags.PRIVATE)) {\n            sb.push(\"private \");\n        }\n        else if (node.is(ast_1.CommonFlags.PROTECTED)) {\n            sb.push(\"protected \");\n        }\n        if (node.is(ast_1.CommonFlags.STATIC)) {\n            sb.push(\"static \");\n        }\n        else if (node.is(ast_1.CommonFlags.ABSTRACT)) {\n            sb.push(\"abstract \");\n        }\n        if (node.is(ast_1.CommonFlags.READONLY)) {\n            sb.push(\"readonly \");\n        }\n    };\n    ASTBuilder.prototype.finish = function () {\n        var ret = this.sb.join(\"\");\n        this.sb = [];\n        return ret;\n    };\n    return ASTBuilder;\n}());\nexports.ASTBuilder = ASTBuilder;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"assemblyscript\"));\n__export(require(\"assemblyscript/cli/transform\"));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLG9DQUErQjtBQUMvQixrREFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCAqIGZyb20gXCJhc3NlbWJseXNjcmlwdFwiO1xuZXhwb3J0ICogZnJvbSBcImFzc2VtYmx5c2NyaXB0L2NsaS90cmFuc2Zvcm1cIjsiXX0=","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assemblyscript_1 = require(\"assemblyscript\");\nvar visitor_1 = require(\"./visitor\");\nvar BaseVisitor = /** @class */ (function (_super) {\n    __extends(BaseVisitor, _super);\n    function BaseVisitor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.depth = 0;\n        return _this;\n    }\n    BaseVisitor.prototype._visit = function (node) {\n        switch (node.kind) {\n            case assemblyscript_1.NodeKind.SOURCE: {\n                this.visitSource(node);\n                break;\n            }\n            // types\n            case assemblyscript_1.NodeKind.NAMEDTYPE: {\n                this.visitNamedTypeNode(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.FUNCTIONTYPE: {\n                this.visitFunctionTypeNode(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.TYPENAME: {\n                this.visitTypeName(node);\n            }\n            case assemblyscript_1.NodeKind.TYPEPARAMETER: {\n                this.visitTypeParameter(node);\n                break;\n            }\n            // expressions\n            case assemblyscript_1.NodeKind.FALSE:\n            case assemblyscript_1.NodeKind.NULL:\n            case assemblyscript_1.NodeKind.SUPER:\n            case assemblyscript_1.NodeKind.THIS:\n            case assemblyscript_1.NodeKind.TRUE:\n            case assemblyscript_1.NodeKind.CONSTRUCTOR:\n            case assemblyscript_1.NodeKind.IDENTIFIER: {\n                this.visitIdentifierExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.ASSERTION: {\n                this.visitAssertionExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.BINARY: {\n                this.visitBinaryExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.CALL: {\n                this.visitCallExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.CLASS: {\n                this.visitClassExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.COMMA: {\n                this.visitCommaExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.ELEMENTACCESS: {\n                this.visitElementAccessExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.FUNCTION: {\n                this.visitFunctionExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.INSTANCEOF: {\n                this.visitInstanceOfExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.LITERAL: {\n                this.visitLiteralExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.NEW: {\n                this.visitNewExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.PARENTHESIZED: {\n                this.visitParenthesizedExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.PROPERTYACCESS: {\n                this.visitPropertyAccessExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.TERNARY: {\n                this.visitTernaryExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.UNARYPOSTFIX: {\n                this.visitUnaryPostfixExpression(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.UNARYPREFIX: {\n                this.visitUnaryPrefixExpression(node);\n                break;\n            }\n            // statements\n            case assemblyscript_1.NodeKind.BLOCK: {\n                this.visitBlockStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.BREAK: {\n                this.visitBreakStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.CONTINUE: {\n                this.visitContinueStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.DO: {\n                this.visitDoStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.EMPTY: {\n                this.visitEmptyStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.EXPORT: {\n                this.visitExportStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.EXPORTDEFAULT: {\n                this.visitExportDefaultStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.EXPORTIMPORT: {\n                this.visitExportImportStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.EXPRESSION: {\n                this.visitExpressionStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.FOR: {\n                this.visitForStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.IF: {\n                this.visitIfStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.IMPORT: {\n                this.visitImportStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.RETURN: {\n                this.visitReturnStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.SWITCH: {\n                this.visitSwitchStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.THROW: {\n                this.visitThrowStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.TRY: {\n                this.visitTryStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.VARIABLE: {\n                this.visitVariableStatement(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.WHILE: {\n                this.visitWhileStatement(node);\n                break;\n            }\n            // declaration statements\n            case assemblyscript_1.NodeKind.CLASSDECLARATION: {\n                this.visitClassDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.ENUMDECLARATION: {\n                this.visitEnumDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.ENUMVALUEDECLARATION: {\n                this.visitEnumValueDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.FIELDDECLARATION: {\n                this.visitFieldDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.FUNCTIONDECLARATION: {\n                this.visitFunctionDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.IMPORTDECLARATION: {\n                this.visitImportDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.INDEXSIGNATUREDECLARATION: {\n                this.visitIndexSignatureDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.INTERFACEDECLARATION: {\n                this.visitInterfaceDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.METHODDECLARATION: {\n                this.visitMethodDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.NAMESPACEDECLARATION: {\n                this.visitNamespaceDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.TYPEDECLARATION: {\n                this.visitTypeDeclaration(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.VARIABLEDECLARATION: {\n                this.visitVariableDeclaration(node);\n                break;\n            }\n            // other\n            case assemblyscript_1.NodeKind.DECORATOR: {\n                this.visitDecoratorNode(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.EXPORTMEMBER: {\n                this.visitExportMember(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.PARAMETER: {\n                this.visitParameter(node);\n                break;\n            }\n            case assemblyscript_1.NodeKind.SWITCHCASE: {\n                this.visitSwitchCase(node);\n                break;\n            }\n            default: assert(false);\n        }\n    };\n    BaseVisitor.prototype.visitSource = function (node) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(node.statements), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var stmt = _c.value;\n                this.depth++;\n                this.visit(stmt);\n                this.depth--;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    BaseVisitor.prototype.visitTypeNode = function (node) { };\n    BaseVisitor.prototype.visitTypeName = function (node) {\n        this.visit(node.identifier);\n        if (node.next) {\n            this.visit(node.next);\n        }\n    };\n    BaseVisitor.prototype.visitNamedTypeNode = function (node) {\n        this.visit(node.name);\n        this.visit(node.typeArguments);\n    };\n    BaseVisitor.prototype.visitFunctionTypeNode = function (node) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(node.parameters), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var param = _c.value;\n                this.visit(param);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        this.visit(node.returnType);\n    };\n    BaseVisitor.prototype.visitTypeParameter = function (node) {\n        this.visit(node.name);\n        if (node.extendsType)\n            this.visit(node.extendsType);\n        if (node.defaultType)\n            this.visit(node.defaultType);\n    };\n    BaseVisitor.prototype.visitIdentifierExpression = function (node) { };\n    BaseVisitor.prototype.visitArrayLiteralExpression = function (node) {\n        var _this = this;\n        node.elementExpressions.map(function (e) {\n            if (e)\n                _this.visit(e);\n        });\n    };\n    BaseVisitor.prototype.visitObjectLiteralExpression = function (node) {\n        if (node.values && node.names) {\n            assert(node.values.length == node.names.length);\n            for (var i = 0; i < node.values.length; i++) {\n                this.visit(node.names[i]);\n                this.visit(node.values[i]);\n            }\n        }\n    };\n    BaseVisitor.prototype.visitAssertionExpression = function (node) {\n        if (node.toType)\n            this.visit(node.toType);\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitBinaryExpression = function (node) {\n        this.visit(node.left);\n        this.visit(node.right);\n    };\n    BaseVisitor.prototype.visitCallExpression = function (node) {\n        this.visit(node.expression);\n        this.visit(node.typeArguments);\n        this.visit(node.arguments);\n    };\n    BaseVisitor.prototype.visitClassExpression = function (node) {\n        this.visit(node.declaration);\n    };\n    BaseVisitor.prototype.visitCommaExpression = function (node) {\n        this.visit(node.expressions);\n    };\n    BaseVisitor.prototype.visitElementAccessExpression = function (node) {\n        this.visit(node.elementExpression);\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitFunctionExpression = function (node) {\n        this.visit(node.declaration);\n    };\n    BaseVisitor.prototype.visitLiteralExpression = function (node) {\n        // node.\n    };\n    BaseVisitor.prototype.visitFloatLiteralExpression = function (node) { };\n    BaseVisitor.prototype.visitInstanceOfExpression = function (node) {\n        this.visit(node.expression);\n        this.visit(node.isType);\n    };\n    BaseVisitor.prototype.visitIntegerLiteralExpression = function (node) { };\n    BaseVisitor.prototype.visitStringLiteral = function (str, singleQuoted) { };\n    BaseVisitor.prototype.visitStringLiteralExpression = function (node) { };\n    BaseVisitor.prototype.visitRegexpLiteralExpression = function (node) { };\n    BaseVisitor.prototype.visitNewExpression = function (node) {\n        this.visit(node.expression);\n        this.visit(node.typeArguments);\n        this.visit(node.arguments);\n    };\n    BaseVisitor.prototype.visitParenthesizedExpression = function (node) {\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitPropertyAccessExpression = function (node) {\n        this.visit(node.property);\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitTernaryExpression = function (node) {\n        this.visit(node.condition);\n        this.visit(node.ifThen);\n        this.visit(node.ifElse);\n    };\n    BaseVisitor.prototype.visitUnaryExpression = function (node) {\n        this.visit(node.operand);\n    };\n    BaseVisitor.prototype.visitUnaryPostfixExpression = function (node) {\n        this.visit(node.operand);\n    };\n    BaseVisitor.prototype.visitUnaryPrefixExpression = function (node) {\n        this.visit(node.operand);\n    };\n    BaseVisitor.prototype.visitSuperExpression = function (node) { };\n    BaseVisitor.prototype.visitFalseExpression = function (node) { };\n    BaseVisitor.prototype.visitTrueExpression = function (node) { };\n    BaseVisitor.prototype.visitThisExpression = function (node) { };\n    BaseVisitor.prototype.visitNullExperssion = function (node) { };\n    BaseVisitor.prototype.visitConstructorExpression = function (node) { };\n    BaseVisitor.prototype.visitNodeAndTerminate = function (statement) { };\n    BaseVisitor.prototype.visitBlockStatement = function (node) {\n        this.depth++;\n        this.visit(node.statements);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitBreakStatement = function (node) {\n        if (node.label) {\n            this.visit(node.label);\n        }\n    };\n    BaseVisitor.prototype.visitContinueStatement = function (node) {\n        if (node.label) {\n            this.visit(node.label);\n        }\n    };\n    BaseVisitor.prototype.visitClassDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        this.depth++;\n        this.visit(node.decorators);\n        assert(node.isGeneric ? node.typeParameters != null : node.typeParameters == null);\n        if (node.isGeneric) {\n            this.visit(node.typeParameters);\n        }\n        if (node.extendsType) {\n            this.visit(node.extendsType);\n        }\n        this.visit(node.implementsTypes);\n        this.visit(node.members);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitDoStatement = function (node) {\n        this.visit(node.condition);\n        this.visit(node.statement);\n    };\n    BaseVisitor.prototype.visitEmptyStatement = function (node) { };\n    BaseVisitor.prototype.visitEnumDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        this.visit(node.decorators);\n        this.visit(node.values);\n    };\n    BaseVisitor.prototype.visitEnumValueDeclaration = function (node) {\n        this.visit(node.name);\n        if (node.initializer) {\n            this.visit(node.initializer);\n        }\n    };\n    BaseVisitor.prototype.visitExportImportStatement = function (node) {\n        this.visit(node.name);\n        this.visit(node.externalName);\n    };\n    BaseVisitor.prototype.visitExportMember = function (node) {\n        this.visit(node.localName);\n        this.visit(node.exportedName);\n    };\n    BaseVisitor.prototype.visitExportStatement = function (node) {\n        if (node.path) {\n            this.visit(node.path);\n        }\n        this.visit(node.members);\n    };\n    BaseVisitor.prototype.visitExportDefaultStatement = function (node) {\n        this.visit(node.declaration);\n    };\n    BaseVisitor.prototype.visitExpressionStatement = function (node) {\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitFieldDeclaration = function (node) {\n        this.visit(node.name);\n        if (node.type) {\n            this.visit(node.type);\n        }\n        if (node.initializer) {\n            this.visit(node.initializer);\n        }\n        this.visit(node.decorators);\n    };\n    BaseVisitor.prototype.visitForStatement = function (node) {\n        if (node.initializer)\n            this.visit(node.initializer);\n        if (node.condition)\n            this.visit(node.condition);\n        if (node.incrementor)\n            this.visit(node.incrementor);\n        this.visit(node.statement);\n    };\n    BaseVisitor.prototype.visitFunctionDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        this.visit(node.decorators);\n        if (node.isGeneric) {\n            this.visit(node.typeParameters);\n        }\n        this.visit(node.signature);\n        this.depth++;\n        if (node.body)\n            this.visit(node.body);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitFunctionCommon = function (node) {\n        // this.visit(node.name)\n    };\n    BaseVisitor.prototype.visitIfStatement = function (node) {\n        this.visit(node.condition);\n        this.visit(node.ifTrue);\n        if (node.ifFalse)\n            this.visit(node.ifFalse);\n    };\n    BaseVisitor.prototype.visitImportDeclaration = function (node) {\n        this.visit(node.foreignName);\n        this.visit(node.name);\n        this.visit(node.decorators);\n    };\n    BaseVisitor.prototype.visitImportStatement = function (node) {\n        if (node.namespaceName)\n            this.visit(node.namespaceName);\n        this.visit(node.declarations);\n    };\n    BaseVisitor.prototype.visitIndexSignatureDeclaration = function (node) {\n        // this.visit(node.name);\n        // this.visit(node.keyType);\n        // this.visit(node.valueType);\n    };\n    BaseVisitor.prototype.visitInterfaceDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        if (node.isGeneric) {\n            this.visit(node.typeParameters);\n        }\n        this.visit(node.implementsTypes);\n        if (node.extendsType)\n            this.visit(node.extendsType);\n        this.depth++;\n        this.visit(node.members);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitMethodDeclaration = function (node) {\n        this.visit(node.name);\n        if (node.isGeneric) {\n            this.visit(node.typeParameters);\n        }\n        this.visit(node.signature);\n        this.visit(node.decorators);\n        this.depth++;\n        if (node.body)\n            this.visit(node.body);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitNamespaceDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        this.visit(node.decorators);\n        this.visit(node.members);\n    };\n    BaseVisitor.prototype.visitReturnStatement = function (node) {\n        if (node.value)\n            this.visit(node.value);\n    };\n    BaseVisitor.prototype.visitSwitchCase = function (node) {\n        if (node.label)\n            this.visit(node.label);\n        this.visit(node.statements);\n    };\n    BaseVisitor.prototype.visitSwitchStatement = function (node) {\n        this.visit(node.condition);\n        this.depth++;\n        this.visit(node.cases);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitThrowStatement = function (node) {\n        this.visit(node.value);\n    };\n    BaseVisitor.prototype.visitTryStatement = function (node) {\n        this.visit(node.statements);\n        if (node.catchVariable)\n            this.visit(node.catchVariable);\n        this.visit(node.catchStatements);\n        this.visit(node.finallyStatements);\n    };\n    BaseVisitor.prototype.visitTypeDeclaration = function (node) {\n        this.visit(node.name);\n        this.visit(node.decorators);\n        this.visit(node.type);\n        this.visit(node.typeParameters);\n    };\n    BaseVisitor.prototype.visitVariableDeclaration = function (node) {\n        this.visit(node.name);\n        if (node.type)\n            this.visit(node.type);\n        if (node.initializer)\n            this.visit(node.initializer);\n    };\n    BaseVisitor.prototype.visitVariableStatement = function (node) {\n        this.visit(node.decorators);\n        this.visit(node.declarations);\n    };\n    BaseVisitor.prototype.visitWhileStatement = function (node) {\n        this.visit(node.condition);\n        this.depth++;\n        this.visit(node.statement);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitVoidStatement = function (node) { };\n    BaseVisitor.prototype.visitComment = function (node) { };\n    BaseVisitor.prototype.visitDecoratorNode = function (node) {\n        this.visit(node.name);\n        this.visit(node.arguments);\n    };\n    BaseVisitor.prototype.visitParameter = function (node) {\n        this.visit(node.name);\n        if (node.implicitFieldDeclaration) {\n            this.visit(node.implicitFieldDeclaration);\n        }\n        if (node.initializer)\n            this.visit(node.initializer);\n        this.visit(node.type);\n    };\n    return BaseVisitor;\n}(visitor_1.AbstractVisitor));\nexports.BaseVisitor = BaseVisitor;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ast_1 = require(\"./ast\");\nvar typeChecker_1 = require(\"./typeChecker\");\nvar ASTBuilder_1 = require(\"./ASTBuilder\");\nvar base_1 = require(\"./base\");\nfunction returnsVoid(node) {\n    return toString(node.signature.returnType) === \"void\";\n}\nfunction numOfParameters(node) {\n    return node.signature.parameters.length;\n}\nfunction isComment(stmt) {\n    return stmt.kind == ast_1.NodeKind.COMMENT;\n}\nfunction hasNearDecorator(stmt) {\n    return stmt.text.includes(\"@nearfile\") || isEntry(stmt);\n}\nfunction toString(node) {\n    return ASTBuilder_1.ASTBuilder.build(node);\n}\nfunction isEntry(source) {\n    var _source = ((source.kind == ast_1.NodeKind.SOURCE ? source : source.range.source));\n    return _source.sourceKind == ast_1.SourceKind.USER_ENTRY;\n}\nfunction isArrayType(type) {\n    return !!(type.kind == ast_1.NodeKind.NAMEDTYPE &&\n        toString(type).startsWith(\"Array\") &&\n        type.typeArguments &&\n        type.typeArguments.length > 0);\n}\nfunction isClass(type) {\n    return type.kind == ast_1.NodeKind.CLASSDECLARATION;\n}\nfunction isField(mem) {\n    return mem.kind == ast_1.NodeKind.FIELDDECLARATION;\n}\nfunction isReference(type) {\n    var simpleTypes = [\"i32\", \"u32\", \"bool\", \"i64\", \"u64\", \"boolean\"];\n    return !simpleTypes.includes(toString(type));\n}\n// TODO: Extract this into separate module, preferrable pluggable\nvar JSONBindingsBuilder = /** @class */ (function (_super) {\n    __extends(JSONBindingsBuilder, _super);\n    function JSONBindingsBuilder() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.typeMapping = {\n            i32: \"Integer\",\n            u32: \"Integer\",\n            i64: \"String\",\n            u64: \"String\",\n            string: \"String\",\n            bool: \"Boolean\",\n            Uint8Array: \"String\"\n        };\n        _this.nonNullableTypes = [\"i32\", \"u32\", \"i64\", \"u64\", \"bool\", \"boolean\"];\n        _this.sb = [];\n        _this.exportedClasses = new Map();\n        _this.wrappedFuncs = new Set();\n        return _this;\n    }\n    JSONBindingsBuilder.build = function (parser, source) {\n        return new JSONBindingsBuilder().build(source);\n    };\n    JSONBindingsBuilder.nearFiles = function (parser) {\n        return parser.program.sources.filter(hasNearDecorator);\n    };\n    JSONBindingsBuilder.prototype.visitClassDeclaration = function (node) {\n        if (!this.exportedClasses.has(toString(node.name))) {\n            this.exportedClasses.set(toString(node.name), node);\n        }\n        _super.prototype.visitClassDeclaration.call(this, node);\n    };\n    JSONBindingsBuilder.prototype.visitFunctionDeclaration = function (node) {\n        if (!isEntry(node) ||\n            this.wrappedFuncs.has(toString(node.name)) ||\n            !node.is(ast_1.CommonFlags.EXPORT) ||\n            (numOfParameters(node) == 0 && returnsVoid(node))) {\n            _super.prototype.visitFunctionDeclaration.call(this, node);\n            return;\n        }\n        // if (numOfParameters(node) > 0){\n        //   this.generateArgsParser(node);\n        // }\n        this.generateWrapperFunction(node);\n        // Change function to not be an export\n        node.flags = node.flags ^ ast_1.CommonFlags.EXPORT;\n        this.wrappedFuncs.add(toString(node.name));\n        _super.prototype.visit.call(this, node);\n    };\n    /*\n    Create a wrapper function that will be export in the function's place.\n    */\n    JSONBindingsBuilder.prototype.generateWrapperFunction = function (func) {\n        var signature = func.signature;\n        var params = signature.parameters;\n        var returnType = signature.returnType;\n        var returnTypeName = toString(returnType)\n            .split(\"|\")\n            .filter(function (name) { return name.trim() !== \"null\"; })\n            .join(\"|\");\n        var hasNull = toString(returnType).includes(\"null\");\n        var name = func.name.symbol;\n        this.sb.push(\"\\n//@ts-ignore\\nfunction __wrapper_\" + name + \"(): void {\");\n        if (params.length > 0) {\n            this.sb.push(\" const json = getInput();\\n  read_register(0, <usize>json.buffer);\\n  const obj: Obj = JSON.parse(json);\");\n        }\n        if (toString(returnType) !== \"void\") {\n            this.sb.push(\"  let result: \" + toString(returnType) + \" = \" + name + \"(\");\n        }\n        else {\n            this.sb.push(\"  \" + name + \"(\");\n        }\n        if (params.length > 0) {\n            this.sb[this.sb.length - 1] += params\n                .map(function (param) { return createDecodeStatement(param); })\n                .join(\", \");\n        }\n        this.sb[this.sb.length - 1] += \");\";\n        if (toString(returnType) !== \"void\") {\n            this.sb.push(\"\\n  let encoder = new JSONEncoder();\\n  let val: Uint8Array;\\n  if ((isString<\" + returnTypeName + \">() || isNullable<\" + returnTypeName + \">()) && result == null) {\\n    encoder.setNull(null);\\n    val = encoder.serialize();\\n  } else {\\n    val = encode<\" + returnTypeName + \">(result\" + (hasNull ? \"!\" : \"\") + \", null, encoder);\\n  }\\n  value_return(val.byteLength, <usize>val.buffer);\");\n        }\n        this.sb.push(\"}\\n\\nexport { __wrapper_\" + name + \" as \" + name + \" }\\n\");\n    };\n    JSONBindingsBuilder.prototype.typeName = function (type) {\n        if (!isClass(type)) {\n            return ASTBuilder_1.ASTBuilder.build(type);\n        }\n        type = type;\n        var className = toString(type.name);\n        if (type.isGeneric) {\n            className += \"<\" + type.typeParameters.map(toString).join(\", \") + \">\";\n        }\n        return className;\n    };\n    JSONBindingsBuilder.prototype.build = function (source) {\n        var _this = this;\n        this.sb = [preamble];\n        this.visit(source);\n        var sourceText = source.statements.map(function (stmt) {\n            var str = ASTBuilder_1.ASTBuilder.build(stmt);\n            if (isClass(stmt)) {\n                var _class = stmt;\n                str = str.slice(0, str.lastIndexOf(\"}\"));\n                var fields = _class.members\n                    .filter(isField)\n                    .map(function (field) { return field; });\n                if (fields.some(function (field) { return field.type == null; })) {\n                    throw new Error(\"All Fields must have explict type declaration.\");\n                }\n                var className = _this.typeName(_class);\n                str += \"\\n  decode<V = Uint8Array>(buf: V): \" + className + \" {\\n    let json: Obj;\\n    if (buf instanceof Uint8Array) {\\n      json = JSON.parse(buf);\\n    }else {\\n      assert(buf instanceof Obj, \\\"argument must be Uint8Array or Json Object\\\");\\n      json = <Obj> buf;\\n    }\\n    return this._decode(json);\\n  }\\n\\n  private _decode(obj: Obj): \" + className + \" {\\n    \" + createDecodeStatements(_class).join(\"\\n    \") + \"\\n    return this;\\n  }\\n\\n  _encode(name: string | null = \\\"\\\", _encoder: JSONEncoder | null = null): JSONEncoder {\\n    let encoder = (_encoder != null ? _encoder : new JSONEncoder())!;\\n    encoder.pushObject(name);\\n    \" + createEncodeStatements(_class).join(\"\\n    \") + \"\\n    encoder.popObject();\\n    return encoder;\\n  }\\n  encode(): Uint8Array {\\n    return this._encode().serialize();\\n  }\\n\\n  serialize(): Uint8Array {\\n    return this.encode();\\n  }\\n\\n  toJSON(): string {\\n    return this._encode().toString();\\n  }\\n}\";\n            }\n            return str;\n        });\n        return this.sb.concat(sourceText).join(\"\\n\");\n    };\n    return JSONBindingsBuilder;\n}(base_1.BaseVisitor));\nfunction createDecodeStatements(_class) {\n    return _class.members\n        .filter(isField)\n        .map(function (field) {\n        var name = toString(field.name);\n        return (createDecodeStatement(field, \"this.\" + name + \" = obj.has(\\\"\" + name + \"\\\") ? \") +\n            (\": this.\" + name + \";\"));\n    });\n}\nfunction createDecodeStatement(field, setterPrefix) {\n    if (setterPrefix === void 0) { setterPrefix = \"\"; }\n    var T = toString(field.type);\n    var name = toString(field.name);\n    return setterPrefix + \"decode<\" + T + \", Obj>(obj, \\\"\" + name + \"\\\")\";\n}\nfunction createEncodeStatements(_class) {\n    return _class.members\n        .filter(isField)\n        .map(function (field) {\n        var T = toString(field.type);\n        var name = toString(field.name);\n        return \"encode<\" + T + \", JSONEncoder>(this.\" + name + \", \\\"\" + name + \"\\\", encoder);\";\n    });\n}\n// TODO: Make work for non-simple generics e.g. field: Array<T>\nfunction isGeneric(_class, field) {\n    if (_class.typeParameters == null) {\n        return false;\n    }\n    return _class.typeParameters.some(function (param) { return toString(param.name) == toString(field.type); });\n}\nvar JSONTransformer = /** @class */ (function (_super) {\n    __extends(JSONTransformer, _super);\n    function JSONTransformer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(JSONTransformer.prototype, \"program\", {\n        get: function () {\n            return this.parser.program;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JSONTransformer.prototype.afterParse = function (parser) {\n        this.parser = parser;\n        var writeFile = this.writeFile;\n        var baseDir = this.baseDir;\n        // Filter for near files\n        var files = JSONBindingsBuilder.nearFiles(parser);\n        // Visit each file\n        files.forEach(function (source) {\n            var writeOut = source.text\n                .substr(0, source.text.indexOf(\"\\n\"))\n                .includes(\"out\");\n            // Remove from logs in parser\n            parser.donelog.delete(source.internalPath);\n            parser.seenlog.delete(source.internalPath);\n            // Remove from programs sources\n            parser.program.sources = parser.program.sources.filter(function (_source) { return _source !== source; });\n            // Build new Source\n            var sourceText = JSONBindingsBuilder.build(parser, source);\n            if (writeOut) {\n                writeFile(\"out/\" + source.normalizedPath, sourceText, baseDir);\n            }\n            // Parses file and any new imports added to the source\n            parser.parseFile(sourceText, (isEntry(source) ? \"\" : \"./\") + source.normalizedPath, isEntry(source));\n        });\n        // Add needed entry file if bundled with webpack so it doesn't have to be passed in later\n        if (BUNDLE) {\n            var libSource = BUNDLE[\"nearEntry\"];\n            this.parser.parseFile(libSource, \"nearFile\", true);\n        }\n    };\n    /** Check for floats */\n    JSONTransformer.prototype.afterCompile = function (module) {\n        typeChecker_1.TypeChecker.check(module);\n    };\n    return JSONTransformer;\n}(ast_1.Transform));\nvar preamble = \"import { JSONEncoder } from \\\"assemblyscript-json\\\";\";\nmodule.exports = JSONTransformer;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_1 = require(\"./base\");\nvar TypeChecker = /** @class */ (function (_super) {\n    __extends(TypeChecker, _super);\n    function TypeChecker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TypeChecker.check = function (node) {\n        var wat = node.toText();\n        var regex = /f32|f64/;\n        if (regex.test(wat))\n            throw new Error(\"Floating point numbers are not allowed in smart contracts\");\n    };\n    return TypeChecker;\n}(base_1.BaseVisitor));\nexports.TypeChecker = TypeChecker;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZUNoZWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZUNoZWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsK0JBQXFDO0FBT3JDO0lBQWlDLCtCQUFXO0lBQTVDOztJQVNBLENBQUM7SUFQUSxpQkFBSyxHQUFaLFVBQWEsSUFBWTtRQUN2QixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUIsSUFBTSxLQUFLLEdBQW9CLFNBQVMsQ0FBQztRQUN6QyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkRBQTJELENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUwsa0JBQUM7QUFBRCxDQUFDLEFBVEQsQ0FBaUMsa0JBQVcsR0FTM0M7QUFUWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGVOYW1lLCBNb2R1bGUgfSBmcm9tICcuL2FzdCc7XG5pbXBvcnQgeyBCYXNlVmlzaXRvciB9IGZyb20gJy4vYmFzZSc7XG5cblxuZGVjbGFyZSBpbnRlcmZhY2UgUmVnRXhwIHtcbiAgdGVzdChzOiBzdHJpbmcpOiBib29sO1xufVxuXG5leHBvcnQgY2xhc3MgVHlwZUNoZWNrZXIgZXh0ZW5kcyBCYXNlVmlzaXRvciB7XG5cbiAgc3RhdGljIGNoZWNrKG5vZGU6IE1vZHVsZSk6IHZvaWQge1xuICAgIGNvbnN0IHdhdCA9IG5vZGUudG9UZXh0KCk7XG4gICAgY29uc3QgcmVnZXg6IFJlZ0V4cCA9IDxSZWdFeHA+IC9mMzJ8ZjY0LztcbiAgICBpZiAocmVnZXgudGVzdCh3YXQpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmxvYXRpbmcgcG9pbnQgbnVtYmVycyBhcmUgbm90IGFsbG93ZWQgaW4gc21hcnQgY29udHJhY3RzXCIpOyAgICBcbiAgICB9XG4gICAgXG59Il19","\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isIterable = function (object) {\n    //@ts-ignore\n    return object != null && typeof object[Symbol.iterator] === \"function\";\n};\n/**\n * Top level visitor that will expect an implemented _visit function to visit\n * a single node and then provides a generic function for collections of nodes\n * and will visit each member of the collection.\n */\nvar AbstractVisitor = /** @class */ (function () {\n    function AbstractVisitor() {\n    }\n    AbstractVisitor.prototype.visit = function (node) {\n        var e_1, _a, e_2, _b;\n        var _this = this;\n        if (node == null)\n            return;\n        if (node instanceof Array) {\n            node.map(function (node) { _this.visit(node); });\n        }\n        else if (node instanceof Map) {\n            try {\n                for (var _c = __values(node.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var _e = __read(_d.value, 2), key = _e[0], _node = _e[1];\n                    this.visit(_node);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            //@ts-ignore Need a better way to test type\n        }\n        else if (isIterable(node)) {\n            try {\n                //TODO: Find better way to test if iterable\n                for (var node_1 = __values(node), node_1_1 = node_1.next(); !node_1_1.done; node_1_1 = node_1.next()) {\n                    var _node = node_1_1.value;\n                    this.visit(_node);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (node_1_1 && !node_1_1.done && (_b = node_1.return)) _b.call(node_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        else {\n            //@ts-ignore Node is not iterable.\n            this._visit(node);\n        }\n    };\n    return AbstractVisitor;\n}());\nexports.AbstractVisitor = AbstractVisitor;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy92aXNpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0EsSUFBTSxVQUFVLEdBQUcsVUFBQyxNQUFjO0lBQ2hDLFlBQVk7SUFDWixPQUFBLE1BQU0sSUFBSSxJQUFJLElBQUksT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFVBQVU7QUFBL0QsQ0FBK0QsQ0FBQztBQUVoRTs7OztHQUlHO0FBQ0w7SUFBQTtJQXNCQSxDQUFDO0lBckJDLCtCQUFLLEdBQUwsVUFBTSxJQUEwQjs7UUFBaEMsaUJBa0JDO1FBakJDLElBQUksSUFBSSxJQUFJLElBQUk7WUFBRSxPQUFPO1FBQ3pCLElBQUksSUFBSSxZQUFZLEtBQUssRUFBRTtZQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBTyxJQUFhLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRDthQUFNLElBQUksSUFBSSxZQUFZLEdBQUcsRUFBRTs7Z0JBQzlCLEtBQXlCLElBQUEsS0FBQSxTQUFBLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQSxnQkFBQSw0QkFBRTtvQkFBaEMsSUFBQSx3QkFBWSxFQUFYLFdBQUcsRUFBRSxhQUFLO29CQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuQjs7Ozs7Ozs7O1lBQ0QsMkNBQTJDO1NBQzVDO2FBQU0sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7O2dCQUN6QiwyQ0FBMkM7Z0JBQzdDLEtBQWtCLElBQUEsU0FBQSxTQUFBLElBQUksQ0FBQSwwQkFBQSw0Q0FBRTtvQkFBbkIsSUFBSSxLQUFLLGlCQUFBO29CQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3JCOzs7Ozs7Ozs7U0FDRjthQUFNO1lBQ0wsa0NBQWtDO1lBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBR0gsc0JBQUM7QUFBRCxDQUFDLEFBdEJELElBc0JDO0FBdEJxQiwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IHR5cGUgQ29sbGVjdGlvbjxUPiA9IFQgfCBUW10gfCBNYXA8c3RyaW5nLCBUIHwgVFtdIHwgSXRlcmFibGU8VD4+IHwgSXRlcmFibGU8VD47XG5cbmNvbnN0IGlzSXRlcmFibGUgPSAob2JqZWN0OiBvYmplY3QpOiBib29sZWFuID0+XG4gIC8vQHRzLWlnbm9yZVxuICBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0W1N5bWJvbC5pdGVyYXRvcl0gPT09IFwiZnVuY3Rpb25cIjtcblxuICAvKipcbiAgICogVG9wIGxldmVsIHZpc2l0b3IgdGhhdCB3aWxsIGV4cGVjdCBhbiBpbXBsZW1lbnRlZCBfdmlzaXQgZnVuY3Rpb24gdG8gdmlzaXRcbiAgICogYSBzaW5nbGUgbm9kZSBhbmQgdGhlbiBwcm92aWRlcyBhIGdlbmVyaWMgZnVuY3Rpb24gZm9yIGNvbGxlY3Rpb25zIG9mIG5vZGVzXG4gICAqIGFuZCB3aWxsIHZpc2l0IGVhY2ggbWVtYmVyIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFZpc2l0b3I8VD4ge1xuICB2aXNpdChub2RlOiBDb2xsZWN0aW9uPFQ+IHwgbnVsbCk6IHZvaWQge1xuICAgIGlmIChub2RlID09IG51bGwpIHJldHVybjtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBub2RlLm1hcCgobm9kZTogVCk6IHZvaWQgPT4geyB0aGlzLnZpc2l0KG5vZGUpOyB9KTtcbiAgICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgIGZvciAobGV0IFtrZXksIF9ub2RlXSBvZiBub2RlLmVudHJpZXMoKSkge1xuICAgICAgICB0aGlzLnZpc2l0KF9ub2RlKTtcbiAgICAgIH1cbiAgICAgIC8vQHRzLWlnbm9yZSBOZWVkIGEgYmV0dGVyIHdheSB0byB0ZXN0IHR5cGVcbiAgICB9IGVsc2UgaWYgKGlzSXRlcmFibGUobm9kZSkpIHtcbiAgICAgICAgLy9UT0RPOiBGaW5kIGJldHRlciB3YXkgdG8gdGVzdCBpZiBpdGVyYWJsZVxuICAgICAgZm9yIChsZXQgX25vZGUgb2Ygbm9kZSkge1xuICAgICAgICAgIHRoaXMudmlzaXQoX25vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvL0B0cy1pZ25vcmUgTm9kZSBpcyBub3QgaXRlcmFibGUuXG4gICAgICB0aGlzLl92aXNpdChub2RlKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgX3Zpc2l0KG5vZGU6IFQpOiB2b2lkO1xufVxuIl19","module.exports = __WEBPACK_EXTERNAL_MODULE_assemblyscript__;"],"sourceRoot":""}